/**
 * Ê®°ÂºèÈÄâÊã©Âô® - Ë¥üË¥£WebSocketËøûÊé•ÁÆ°ÁêÜÂíåÊ®°ÂºèÂàáÊç¢
 * ÂÆûÁé∞‰∫ÜÂçï‰æãWebSocketËøûÊé•ÔºåÊîØÊåÅLANÂíåInternetÊ®°ÂºèÊó†ÁºùÂàáÊç¢
 */
class ModeSelector {
    constructor() {
        // Ê®°ÂºèÁä∂ÊÄÅ
        this.currentMode = 'lan';
        this.chatModeInstance = null;
        this.isInitialized = false;
        
        // WebSocketËøûÊé•Áä∂ÊÄÅ
        this.websocket = null;
        this.isWebSocketConnected = false;
        this.reconnectionAttempts = 0;
        this.currentServerIndex = 0;
        this.availableServers = [];
        this.heartbeatTimer = null;
        
        // Á≠âÂæÖDOMÂä†ËΩΩÂÆåÊàê
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }
    
    async init() {
        this.initializeElements();
        this.bindEvents();
        
        // ÂÖàÂª∫Á´ãWebSocketËøûÊé•
        await this.connectToAvailableServer();
        
        // ÈªòËÆ§Âä†ËΩΩÂ±ÄÂüüÁΩëÊ®°Âºè
        await this.loadMode('lan');
        this.isInitialized = true;
    }
    
    /**
     * ÂàùÂßãÂåñDOMÂÖÉÁ¥†ÂºïÁî®
     */
    initializeElements() {
        this.elements = {
            lanModeButton: document.getElementById('lanMode'),
            internetModeButton: document.getElementById('internetMode'),
            internetRoomControls: document.getElementById('internetRoomControls'),
            lanStatus: document.getElementById('lanStatus')
        };
    }
    
    /**
     * ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    bindEvents() {
        this.elements.lanModeButton.addEventListener('click', () => this.switchMode('lan'));
        this.elements.internetModeButton.addEventListener('click', () => this.switchMode('internet'));
    }
    
    // WebSocketËøûÊé•ÁÆ°ÁêÜ
    async connectToAvailableServer() {
        try {
            if (!WS_CONFIG.servers || WS_CONFIG.servers.length === 0) {
                this.showNotification('‚ùå Ê≤°ÊúâÂèØÁî®ÁöÑÊúçÂä°Âô®ÈÖçÁΩÆ');
                return;
            }
            
            // Convert server URLs to objects with priority if needed
            this.availableServers = WS_CONFIG.servers.map((server, index) => {
                if (typeof server === 'string') {
                    return { url: server, priority: index + 1 };
                }
                return server;
            });
            this.tryNextServer();
        } catch (error) {
            console.error('Failed to load server list:', error);
            this.showNotification('‚ùå Âä†ËΩΩÊúçÂä°Âô®ÂàóË°®Â§±Ë¥•');
        }
    }
    
    tryNextServer() {
        if (this.currentServerIndex >= this.availableServers.length) {
            this.showNotification('‚ùå ÊâÄÊúâÊúçÂä°Âô®ÈÉΩ‰∏çÂèØÁî®');
            this.currentServerIndex = 0;
            return;
        }
        
        const server = this.availableServers[this.currentServerIndex];
        const serverUrl = server.url;
        console.log(`Trying server ${this.currentServerIndex + 1}/${this.availableServers.length}: ${server.name || serverUrl}`);
        this.showNotification(`üîÑ ËøûÊé•Âà∞ ${server.name || 'ÊúçÂä°Âô®'}...`);
        this.connectWebSocket(serverUrl);
    }
    
    connectWebSocket(serverUrl) {
        try {
            this.websocket = new WebSocket(serverUrl || WS_CONFIG.url);
            
            this.websocket.onopen = () => {
                console.log('WebSocket connected to:', serverUrl || WS_CONFIG.url);
                this.isWebSocketConnected = true;
                this.reconnectionAttempts = 0;
                this.currentServerIndex = 0;
                this.showNotification('‚úÖ Â∑≤ËøûÊé•Âà∞‰ø°‰ª§ÊúçÂä°Âô®');
                this.startHeartbeat();
                
                // ÈÄöÁü•ÂΩìÂâçÊ®°ÂºèWebSocketÂ∑≤ËøûÊé•
                if (this.chatModeInstance && this.chatModeInstance.onWebSocketConnected) {
                    this.chatModeInstance.onWebSocketConnected();
                }
            };
            
            this.websocket.onmessage = (event) => {
                const message = JSON.parse(event.data);
                // Â∞ÜÊ∂àÊÅØËΩ¨ÂèëÁªôÂΩìÂâçÊ®°ÂºèÂ§ÑÁêÜ
                if (this.chatModeInstance && this.chatModeInstance.handleWebSocketMessage) {
                    this.chatModeInstance.handleWebSocketMessage(message);
                }
            };
            
            this.websocket.onerror = (error) => {
                console.error('WebSocket error:', error);
                this.showNotification('‚ùå ËøûÊé•ÈîôËØØÔºåÂ∞ùËØï‰∏ã‰∏Ä‰∏™ÊúçÂä°Âô®...');
                
                this.currentServerIndex++;
                setTimeout(() => this.tryNextServer(), WS_CONFIG.serverSwitchDelay);
            };
            
            this.websocket.onclose = () => {
                console.log('WebSocket disconnected');
                this.isWebSocketConnected = false;
                this.stopHeartbeat();
                
                // ÈÄöÁü•ÂΩìÂâçÊ®°ÂºèWebSocketÂ∑≤Êñ≠ÂºÄ
                if (this.chatModeInstance && this.chatModeInstance.onWebSocketDisconnected) {
                    this.chatModeInstance.onWebSocketDisconnected();
                }
                
                if (this.reconnectionAttempts < WS_CONFIG.maxReconnectAttempts) {
                    this.showNotification(`üîÑ ÈáçËøû‰∏≠... (${this.reconnectionAttempts + 1}/${WS_CONFIG.maxReconnectAttempts})`);
                    setTimeout(() => {
                        this.reconnectionAttempts++;
                        this.connectWebSocket(serverUrl);
                    }, WS_CONFIG.reconnectDelay);
                } else {
                    this.reconnectionAttempts = 0;
                    this.currentServerIndex++;
                    this.showNotification('‚ö†Ô∏è ËøûÊé•Â§±Ë¥•ÔºåÂ∞ùËØï‰∏ã‰∏Ä‰∏™ÊúçÂä°Âô®...');
                    setTimeout(() => this.tryNextServer(), WS_CONFIG.serverSwitchDelay);
                }
            };
        } catch (error) {
            console.error('Failed to connect WebSocket:', error);
        }
    }
    
    /**
     * ÂèëÈÄÅWebSocketÊ∂àÊÅØ
     * @param {Object} data - Ë¶ÅÂèëÈÄÅÁöÑÊï∞ÊçÆ
     */
    sendWebSocketMessage(data) {
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            this.websocket.send(JSON.stringify(data));
        } else {
            console.error('WebSocket is not connected');
        }
    }
    
    /**
     * ÂêØÂä®ÂøÉË∑≥Ê£ÄÊµã
     */
    startHeartbeat() {
        this.heartbeatTimer = setInterval(() => {
            if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
                this.websocket.send(JSON.stringify({ type: 'heartbeat' }));
            }
        }, 30000);
    }
    
    /**
     * ÂÅúÊ≠¢ÂøÉË∑≥Ê£ÄÊµã
     */
    stopHeartbeat() {
        if (this.heartbeatTimer) {
            clearInterval(this.heartbeatTimer);
            this.heartbeatTimer = null;
        }
    }
    
    // Ê®°ÂºèÁÆ°ÁêÜ
    async loadMode(mode) {
        try {
            // Ê∏ÖÁêÜÂΩìÂâçÊ®°ÂºèÁä∂ÊÄÅÔºà‰ΩÜ‰∏çÊñ≠ÂºÄWebSocketÔºâ
            if (this.chatModeInstance) {
                this.cleanupMode();
            }
            
            // Êõ¥Êñ∞UI
            this.updateUI(mode);
            
            // Âä®ÊÄÅÂä†ËΩΩÂØπÂ∫îÁöÑËÑöÊú¨
            if (mode === 'lan') {
                if (!window.LANMode) {
                    await this.loadScript('assets/lan.js');
                }
                    // ÂàõÂª∫ÂÆû‰æãÊó∂‰º†ÂÖ•ÂèëÈÄÅÊ∂àÊÅØÁöÑÊñπÊ≥ï
                this.chatModeInstance = new window.LANMode(
                    (data) => this.sendWebSocketMessage(data),
                    this.isWebSocketConnected
                );
            } else {
                if (!window.InternetMode) {
                    await this.loadScript('assets/net.js');
                }
                this.chatModeInstance = new window.InternetMode(
                    (data) => this.sendWebSocketMessage(data),
                    this.isWebSocketConnected
                );
            }
            
            // Â¶ÇÊûúWebSocketÂ∑≤ËøûÊé•ÔºåÈÄöÁü•Êñ∞Ê®°Âºè
            if (this.isWebSocketConnected && this.chatModeInstance.onWebSocketConnected) {
                this.chatModeInstance.onWebSocketConnected();
            }
            
            this.currentMode = mode;
            console.log(`Loaded ${mode} mode`);
            
        } catch (error) {
            console.error(`Failed to load ${mode} mode:`, error);
            this.showNotification(`‚ùå Âä†ËΩΩ${mode === 'lan' ? 'Â±ÄÂüüÁΩë' : 'ÂÖ¨ÁΩë'}Ê®°ÂºèÂ§±Ë¥•`);
        }
    }
    
    loadScript(src) {
        return new Promise((resolve, reject) => {
            const existing = document.querySelector(`script[src="${src}"]`);
            if (existing) {
                resolve();
                return;
            }
            
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
    
    switchMode(mode) {
        if (mode === this.currentMode) return;
        
        this.showNotification(`ÂàáÊç¢Âà∞${mode === 'lan' ? 'Â±ÄÂüüÁΩë' : 'ÂÖ¨ÁΩë'}Ê®°Âºè...`);
        this.loadMode(mode);
    }
    
    /**
     * Ê∏ÖÁêÜÂΩìÂâçÊ®°ÂºèÂÆû‰æã
     */
    cleanupMode() {
        if (!this.chatModeInstance) return;
        
        // Ë∞ÉÁî®Ê®°ÂºèÁöÑÊ∏ÖÁêÜÊñπÊ≥ï
        if (this.chatModeInstance.cleanup) {
            this.chatModeInstance.cleanup();
        }
        
        this.chatModeInstance = null;
    }
    
    updateUI(mode) {
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
        
        if (mode === 'lan') {
            this.elements.lanModeButton.classList.add('active');
            this.elements.lanStatus.style.display = 'block';
            this.elements.internetRoomControls.style.display = 'none';
            
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.placeholder = 'Ê£ÄÊµãÂà∞ÂêåÁΩëÊÆµÁî®Êà∑ÂêéÂç≥ÂèØÂºÄÂßãËÅäÂ§©...';
            }
        } else {
            this.elements.internetModeButton.classList.add('active');
            this.elements.lanStatus.style.display = 'none';
            this.elements.internetRoomControls.style.display = 'flex';
            
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.placeholder = 'Âä†ÂÖ•ÊàøÈó¥ÂêéÂç≥ÂèØÂºÄÂßãËÅäÂ§©...';
            }
        }
        
        // Ê∏ÖÁ©∫ËÅäÂ§©ËÆ∞ÂΩï
        const chatMessages = document.getElementById('chatMessages');
        if (chatMessages) {
            chatMessages.innerHTML = '';
        }
        
        // Ê∏ÖÁ©∫Áî®Êà∑ÂàóË°®
        const userListContainer = document.getElementById('userListContainer');
        if (userListContainer) {
            userListContainer.innerHTML = '';
        }
    }
    
    showNotification(text) {
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = text;
        
        const existingNotifications = document.querySelectorAll('.notification:not(.notification-exit)');
        const offset = existingNotifications.length * 60;
        notification.style.top = `${20 + offset}px`;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('notification-show'), 10);
        
        setTimeout(() => {
            notification.classList.add('notification-exit');
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }
}

/**
 * Âü∫Á°ÄËÅäÂ§©Ê®°ÂºèÁ±ª - ÂåÖÂê´ÊâÄÊúâÊ®°ÂºèÂÖ±‰∫´ÁöÑÂäüËÉΩ
 */
class BaseChatMode {
    constructor(sendWebSocketMessage, isWebSocketConnected) {
        this.sendWebSocketMessage = sendWebSocketMessage;
        this.isWebSocketConnected = isWebSocketConnected;
        
        // P2P ËøûÊé•ÁÆ°ÁêÜ
        this.peerConnections = new Map();
        this.currentRoomId = null;
        this.currentUserId = null;
        this.currentUserInfo = null;
        this.roomUsers = new Map();
    }

    // ÂÖ±‰∫´ÁöÑDOMÂÖÉÁ¥†ÂàùÂßãÂåñ
    initializeSharedElements() {
        return {
            messageInput: document.getElementById('messageInput'),
            sendButton: document.getElementById('sendBtn'),
            chatMessages: document.getElementById('chatMessages'),
            connectionStatus: document.getElementById('connectionStatus'),
            fileInput: document.getElementById('fileInput'),
            attachButton: document.getElementById('attachBtn')
        };
    }

    // ÂÖ±‰∫´ÁöÑ‰∫ã‰ª∂ÁªëÂÆö
    bindSharedEvents() {
        this.domElements.sendButton.addEventListener('click', () => this.sendChatMessage());
        this.domElements.messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') this.sendChatMessage();
        });
        
        // ËæìÂÖ•Ê°ÜÁ≤òË¥¥‰∫ã‰ª∂
        this.domElements.messageInput.addEventListener('paste', (event) => {
            const items = (event.clipboardData || window.clipboardData).items;
            
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                
                // Ê£ÄÊü•ÊòØÂê¶‰∏∫Êñá‰ª∂
                if (item.kind === 'file') {
                    let file = item.getAsFile();
                    if (file) {
                        // Â¶ÇÊûúÊòØÁ≤òË¥¥ÁöÑÂõæÁâá‰∏îÊ≤°ÊúâÊñá‰ª∂ÂêçÔºåËá™Âä®ÁîüÊàêÊñá‰ª∂Âêç
                        if (file.type.startsWith('image/') && (!file.name || file.name === 'image.png')) {
                            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                            const extension = file.type.split('/')[1] || 'png';
                            
                            // ÂàõÂª∫Êñ∞ÁöÑFileÂØπË±°ÔºåÂ∏¶ÊúâËá™ÂÆö‰πâÂêçÁß∞
                            file = new File([file], `Á≤òË¥¥ÂõæÁâá-${timestamp}.${extension}`, {
                                type: file.type,
                                lastModified: file.lastModified
                            });
                        }
                        
                        event.preventDefault(); // ÈòªÊ≠¢ÈªòËÆ§Á≤òË¥¥Ë°å‰∏∫
                        this.handleFileSelection(file);
                        this.showNotification(`üìé Â∑≤Á≤òË¥¥Êñá‰ª∂: ${file.name}`);
                        break;
                    }
                }
            }
        });
        
        // Êñá‰ª∂Áõ∏ÂÖ≥‰∫ã‰ª∂
        this.domElements.attachButton.addEventListener('click', () => {
            this.domElements.fileInput.click();
        });
        
        this.domElements.fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                this.handleFileSelection(file);
            }
        });
        
        // ÊãñÊîæ‰∫ã‰ª∂Â§ÑÁêÜ
        this.setupDragAndDrop();
        
        // ÂÖ®Â±ÄÁ≤òË¥¥ÊîØÊåÅ
        this.setupGlobalPaste();
    }
    
    // ËÆæÁΩÆÊãñÊîæÂäüËÉΩ
    setupDragAndDrop() {
        const chatContainer = document.querySelector('.chat-container');
        let dragOverlay = null;
        
        // ÂàõÂª∫ÊãñÊãΩË¶ÜÁõñÂ±Ç
        const createDragOverlay = () => {
            if (dragOverlay) return;
            
            dragOverlay = document.createElement('div');
            dragOverlay.className = 'drag-overlay';
            dragOverlay.innerHTML = 'üìÅ ÊãñÊîæÊñá‰ª∂Âà∞Ê≠§Â§ÑÂèëÈÄÅ';
            dragOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(102, 126, 234, 0.95);
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 28px;
                font-weight: 600;
                z-index: 99999;
                border: 4px dashed rgba(255, 255, 255, 0.9);
                border-radius: 20px;
                margin: 20px;
                backdrop-filter: blur(15px);
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.2s ease;
            `;
            
            document.body.appendChild(dragOverlay);
            
            // Âº∫Âà∂ÈáçÁªòÂêéÊòæÁ§∫
            requestAnimationFrame(() => {
                if (dragOverlay) {
                    dragOverlay.style.opacity = '1';
                }
            });
        };
        
        // ÁßªÈô§ÊãñÊãΩË¶ÜÁõñÂ±Ç
        const removeDragOverlay = () => {
            if (dragOverlay) {
                dragOverlay.style.opacity = '0';
                setTimeout(() => {
                    if (dragOverlay && dragOverlay.parentNode) {
                        document.body.removeChild(dragOverlay);
                    }
                    dragOverlay = null;
                }, 200);
            }
        };
        
        // ÈòªÊ≠¢ÈªòËÆ§ÊãñÊîæË°å‰∏∫
        ['dragenter', 'dragover', 'drop'].forEach(eventName => {
            document.addEventListener(eventName, (e) => {
                e.preventDefault();
                e.stopPropagation();
            });
        });
        
        // ÊãñÊãΩËøõÂÖ•
        document.addEventListener('dragenter', (e) => {
            if (e.dataTransfer && e.dataTransfer.types && 
                e.dataTransfer.types.includes('Files')) {
                createDragOverlay();
            }
        });
        
        // ÊãñÊãΩÁ¶ªÂºÄ
        document.addEventListener('dragleave', (e) => {
            // Ê£ÄÊü•ÊòØÂê¶Á¶ªÂºÄ‰∫ÜÊµèËßàÂô®Á™óÂè£
            const rect = document.documentElement.getBoundingClientRect();
            if (e.clientX <= rect.left || e.clientX >= rect.right ||
                e.clientY <= rect.top || e.clientY >= rect.bottom) {
                removeDragOverlay();
            }
        });
        
        // Êñá‰ª∂ÊîæÁΩÆ
        document.addEventListener('drop', (e) => {
            removeDragOverlay();
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.handleFileSelection(files[0]);
            }
        });
    }
    
    // ËÆæÁΩÆÂÖ®Â±ÄÁ≤òË¥¥ÂäüËÉΩ
    setupGlobalPaste() {
        document.addEventListener('paste', (event) => {
            // Â¶ÇÊûúÂΩìÂâçÁÑ¶ÁÇπÂú®ËæìÂÖ•Ê°ÜÔºåÂàôÁî±ËæìÂÖ•Ê°ÜÁöÑÁ≤òË¥¥‰∫ã‰ª∂Â§ÑÁêÜ
            if (document.activeElement === this.domElements.messageInput) {
                return;
            }
            
            const items = (event.clipboardData || window.clipboardData).items;
            
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                
                // Ê£ÄÊü•ÊòØÂê¶‰∏∫Êñá‰ª∂
                if (item.kind === 'file') {
                    let file = item.getAsFile();
                    if (file) {
                        // Â¶ÇÊûúÊòØÁ≤òË¥¥ÁöÑÂõæÁâá‰∏îÊ≤°ÊúâÊñá‰ª∂ÂêçÔºåËá™Âä®ÁîüÊàêÊñá‰ª∂Âêç
                        if (file.type.startsWith('image/') && (!file.name || file.name === 'image.png')) {
                            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                            const extension = file.type.split('/')[1] || 'png';
                            
                            // ÂàõÂª∫Êñ∞ÁöÑFileÂØπË±°ÔºåÂ∏¶ÊúâËá™ÂÆö‰πâÂêçÁß∞
                            file = new File([file], `Á≤òË¥¥ÂõæÁâá-${timestamp}.${extension}`, {
                                type: file.type,
                                lastModified: file.lastModified
                            });
                        }
                        
                        event.preventDefault(); // ÈòªÊ≠¢ÈªòËÆ§Á≤òË¥¥Ë°å‰∏∫
                        this.handleFileSelection(file);
                        this.showNotification(`üìé Â∑≤Á≤òË¥¥Êñá‰ª∂: ${file.name}`);
                        break;
                    }
                }
            }
        });
    }

    // WebSocketËøûÊé•ÁÆ°ÁêÜ
    onWebSocketConnected() {
        this.isWebSocketConnected = true;
        this.updateConnectionStatus('connected');
    }

    onWebSocketDisconnected() {
        this.isWebSocketConnected = false;
        this.updateConnectionStatus('disconnected');
        this.closePeerConnections();
    }

    // WebSocketÊ∂àÊÅØÂ§ÑÁêÜ
    handleWebSocketMessage(message) {
        switch (message.type) {
            case 'joined':
                this.currentUserId = message.userId;
                this.currentUserInfo = message.userInfo || this.generateUserInfo();
                this.handleJoinedRoom(message);
                break;
            case 'user-joined':
                this.handleUserJoined(message);
                break;
            case 'user-left':
                this.handleUserLeft(message);
                break;
            case 'user-list':
                this.updateUserList(message.users);
                break;
            case 'offer':
                this.handleOffer(message);
                break;
            case 'answer':
                this.handleAnswer(message);
                break;
            case 'ice-candidate':
                this.handleIceCandidate(message);
                break;
            case 'heartbeat-ack':
                break;
        }
    }

    // Áî®Êà∑ÁÆ°ÁêÜ
    handleUserJoined(data) {
        if (data.userInfo) {
            this.roomUsers.set(data.userId, data.userInfo);
        }
        
        const userInfo = this.roomUsers.get(data.userId);
        const userName = userInfo ? userInfo.name : 'Áî®Êà∑';
        this.showNotification(`üëã ${userName} Âä†ÂÖ•‰∫ÜÊàøÈó¥`);
        this.updateUserList();
        
        if (data.userId !== this.currentUserId) {
            this.createPeerConnection(data.userId, false);
        }
    }

    handleUserLeft(data) {
        const userInfo = this.roomUsers.get(data.userId);
        const userName = userInfo ? userInfo.name : 'Áî®Êà∑';
        this.showNotification(`üëã ${userName} Á¶ªÂºÄ‰∫ÜÊàøÈó¥`);
        
        this.roomUsers.delete(data.userId);
        this.updateUserList();
        
        if (this.peerConnections.has(data.userId)) {
            const peerData = this.peerConnections.get(data.userId);
            peerData.pc.close();
            this.peerConnections.delete(data.userId);
        }
    }

    // P2PËøûÊé•ÁÆ°ÁêÜ
    createPeerConnection(peerId, createOffer) {
        console.log(`Creating peer connection with ${this.formatUserId(peerId)}, createOffer: ${createOffer}`);
        const pc = new RTCPeerConnection(RTC_CONFIG);
        const peerData = { pc, dataChannel: null };
        this.peerConnections.set(peerId, peerData);
        
        pc.onconnectionstatechange = () => {
            console.log(`Connection state with ${this.formatUserId(peerId)}: ${pc.connectionState}`);
            if (pc.connectionState === 'connected') {
                this.showNotification(`‚úÖ Â∑≤‰∏éÁî®Êà∑Âª∫Á´ãP2PËøûÊé•`);
            } else if (pc.connectionState === 'failed') {
                this.showNotification(`‚ùå ‰∏éÁî®Êà∑ÁöÑP2PËøûÊé•Â§±Ë¥•`);
            }
        };
        
        if (createOffer) {
            const dataChannel = pc.createDataChannel('chat', {
                ordered: true
            });
            peerData.dataChannel = dataChannel;
            this.setupDataChannel(dataChannel, peerId);
        }
        
        pc.onicecandidate = (event) => {
            if (event.candidate) {
                console.log(`Sending ICE candidate to ${this.formatUserId(peerId)}`);
                this.sendWebSocketMessage({
                    type: 'ice-candidate',
                    target: peerId,
                    data: event.candidate
                });
            }
        };
        
        pc.ondatachannel = (event) => {
            console.log(`Received data channel from ${this.formatUserId(peerId)}`);
            peerData.dataChannel = event.channel;
            this.setupDataChannel(event.channel, peerId);
        };
        
        if (createOffer) {
            pc.createOffer().then(offer => {
                console.log(`Creating offer for ${this.formatUserId(peerId)}`);
                pc.setLocalDescription(offer);
                this.sendWebSocketMessage({
                    type: 'offer',
                    target: peerId,
                    data: offer
                });
            }).catch(error => {
                console.error(`Failed to create offer for ${this.formatUserId(peerId)}:`, error);
            });
        }
        
        return pc;
    }

    setupDataChannel(dataChannel, peerId) {
        dataChannel.onopen = () => {
            console.log(`Data channel opened with ${this.formatUserId(peerId)}`);
            this.showNotification(`üí¨ Êï∞ÊçÆÈÄöÈÅìÂ∑≤Âª∫Á´ãÔºåÂèØ‰ª•ÂºÄÂßãËÅäÂ§©`);
            this.updateChannelStatus();
            this.renderUserList();
        };
        
        dataChannel.onmessage = (event) => {
            const message = JSON.parse(event.data);
            
            // Â§ÑÁêÜ‰∏çÂêåÁ±ªÂûãÁöÑÊ∂àÊÅØ
            switch (message.type) {
                case 'file-offer':
                    this.handleFileOffer(message, peerId);
                    break;
                case 'file-accept':
                    this.handleFileAccept(message, peerId);
                    break;
                case 'file-reject':
                    this.handleFileReject(message, peerId);
                    break;
                case 'file-cancel':
                    this.handleFileCancel(message, peerId);
                    break;
                case 'file-cancel-receive':
                    this.handleFileCancelReceive(message, peerId);
                    break;
                case 'file-metadata':
                    this.handleFileMetadata(message, peerId);
                    break;
                case 'file-chunk':
                    this.handleFileChunk(message, peerId);
                    break;
                case 'file-progress':
                    this.handleFileProgress(message, peerId);
                    break;
                default:
                    // ÊôÆÈÄöÊñáÊú¨Ê∂àÊÅØ
                    this.displayMessage(message, false);
                    break;
            }
        };
        
        dataChannel.onerror = (error) => {
            console.error(`Data channel error with ${this.formatUserId(peerId)}:`, error);
            
            // Ê∏ÖÁêÜÂèØËÉΩÊ≠£Âú®ËøõË°åÁöÑÊñá‰ª∂‰º†Ëæì
            if (this.fileSenders) {
                for (const [fileId, sender] of this.fileSenders.entries()) {
                    if (sender.peerId === peerId) {
                        sender.isPaused = true;
                        this.showNotification(`‚ùå Êñá‰ª∂‰º†Ëæì‰∏≠Êñ≠: ${sender.file.name}`);
                        this.fileSenders.delete(fileId);
                    }
                }
            }
            
            this.showNotification(`‚ö†Ô∏è ‰∏é ${this.formatUserId(peerId)} ÁöÑÊï∞ÊçÆÈÄöÈÅìÂá∫Áé∞ÈîôËØØÔºåËØ∑ÈáçÊñ∞ËøûÊé•`);
        };
        
        dataChannel.onclose = () => {
            console.log(`Data channel closed with ${this.formatUserId(peerId)}`);
            this.updateChannelStatus();
            this.renderUserList();
        };
    }

    updateChannelStatus() {
        this.renderUserList();
    }

    handleOffer(data) {
        const pc = this.createPeerConnection(data.from, false);
        
        pc.setRemoteDescription(new RTCSessionDescription(data.data))
            .then(() => pc.createAnswer())
            .then(answer => {
                pc.setLocalDescription(answer);
                this.sendWebSocketMessage({
                    type: 'answer',
                    target: data.from,
                    data: answer
                });
            });
    }

    handleAnswer(data) {
        const peerData = this.peerConnections.get(data.from);
        if (peerData) {
            peerData.pc.setRemoteDescription(new RTCSessionDescription(data.data));
        }
    }

    handleIceCandidate(data) {
        const peerData = this.peerConnections.get(data.from);
        if (peerData) {
            peerData.pc.addIceCandidate(new RTCIceCandidate(data.data));
        }
    }

    // Ê∂àÊÅØÂäüËÉΩ
    sendChatMessage() {
        const message = this.domElements.messageInput.value.trim();
        if (!message) return;
        
        const messageData = {
            text: message,
            userId: this.currentUserId,
            userInfo: this.currentUserInfo,
            timestamp: Date.now()
        };
        
        let sentToAnyPeer = false;
        this.peerConnections.forEach((peerData) => {
            if (peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
                peerData.dataChannel.send(JSON.stringify(messageData));
                sentToAnyPeer = true;
            }
        });
        
        this.displayMessage(messageData, true);
        this.domElements.messageInput.value = '';
        
        if (!sentToAnyPeer && this.roomUsers.size <= 1) {
            this.showNotification('üí° ÂΩìÂâçÂè™ÊúâÊÇ®Âú®ÊàøÈó¥‰∏≠');
        }
    }
    
    // Êñá‰ª∂Â§ÑÁêÜÁõ∏ÂÖ≥ÊñπÊ≥ï
    handleFileSelection(file) {
        // ÊâÄÊúâÊñá‰ª∂ÈÉΩÈúÄË¶ÅÂÖàÂèëÈÄÅofferÔºåÂåÖÊã¨ÂõæÁâá
        // ËøôÊ†∑ÂèØ‰ª•ÂÆûÁé∞ÊµÅÂºè‰º†ËæìÔºåÈÅøÂÖçÂ∞ÜÂ§ßÊñá‰ª∂ÂÆåÂÖ®Âä†ËΩΩÂà∞ÂÜÖÂ≠ò
        
        // ÁîüÊàêÊñá‰ª∂offer
        const fileOffer = {
            type: 'file-offer',
            fileId: Date.now() + '-' + Math.random().toString(36).substr(2, 9),
            fileName: file.name,
            fileType: file.type,
            fileSize: file.size,
            userId: this.currentUserId,
            userInfo: this.currentUserInfo,
            timestamp: Date.now()
        };
        
        // ‰øùÂ≠òÊñá‰ª∂ÂºïÁî®ÔºåÁ≠âÂæÖÂØπÊñπÊé•Âèó
        this.pendingFiles = this.pendingFiles || new Map();
        this.pendingFiles.set(fileOffer.fileId, file);
        
        // ÂèëÈÄÅÊñá‰ª∂‰º†ËæìËØ∑Ê±ÇÁªôÊâÄÊúâËøûÊé•ÁöÑÂØπÁ≠âÊñπ
        let sentToAnyPeer = false;
        this.peerConnections.forEach((peerData, peerId) => {
            if (peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
                peerData.dataChannel.send(JSON.stringify(fileOffer));
                sentToAnyPeer = true;
            }
        });
        
        if (sentToAnyPeer) {
            // ÊòæÁ§∫Á≠âÂæÖÁ°ÆËÆ§ÁöÑÊ∂àÊÅØ
            this.displayFileOffer(fileOffer, true);
        } else {
            this.showNotification('üí° ÂΩìÂâçÊ≤°ÊúâËøûÊé•ÁöÑÁî®Êà∑ÔºåÊó†Ê≥ïÂèëÈÄÅÊñá‰ª∂');
            this.pendingFiles.delete(fileOffer.fileId);
        }
        
        this.domElements.fileInput.value = ''; // Ê∏ÖÁ©∫Êñá‰ª∂ÈÄâÊã©
    }
    
    // Ê≠§ÊñπÊ≥ïÂ∑≤Ë¢´ÁßªÈô§ÔºåÊîπÁî®ÊµÅÂºè‰º†ËæìÊú∫Âà∂

    displayMessage(data, isOwn) {
        const messageWrapper = document.createElement('div');
        messageWrapper.className = `message-wrapper ${isOwn ? 'own' : 'other'}`;
        
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        
        const avatar = document.createElement('img');
        avatar.className = 'message-avatar';
        avatar.src = data.userInfo.avatar;
        avatar.alt = data.userInfo.name;
        
        const headerText = document.createElement('div');
        headerText.className = 'message-header-text';
        
        const name = document.createElement('span');
        name.className = 'message-name';
        name.textContent = data.userInfo.name;
        
        const time = document.createElement('span');
        time.className = 'message-time';
        time.textContent = new Date(data.timestamp).toLocaleTimeString();
        
        headerText.appendChild(name);
        headerText.appendChild(time);
        
        messageHeader.appendChild(avatar);
        messageHeader.appendChild(headerText);
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOwn ? 'message-own' : 'message-other'}`;
        
        const messageText = document.createElement('p');
        messageText.className = 'message-text';
        messageText.innerHTML = this.escapeHtml(data.text);
        
        messageDiv.appendChild(messageText);
        
        messageWrapper.appendChild(messageHeader);
        messageWrapper.appendChild(messageDiv);
        
        this.domElements.chatMessages.appendChild(messageWrapper);
        this.domElements.chatMessages.scrollTop = this.domElements.chatMessages.scrollHeight;
    }
    
    // Êñá‰ª∂Êé•Êî∂Áõ∏ÂÖ≥
    fileReceivers = new Map(); // Â≠òÂÇ®Ê≠£Âú®Êé•Êî∂ÁöÑÊñá‰ª∂
    
    handleFileMetadata(metadata, peerId) {
        // Ëé∑ÂèñÊé•Êî∂Âô®
        let receiver = this.fileReceivers.get(metadata.fileId);
        
        if (!receiver) {
            // Â¶ÇÊûúÊ≤°ÊúâÊé•Êî∂Âô®ÔºåËØ¥Êòé‰∏çÊòØÈÄöËøá acceptFileOffer ÊµÅÁ®ãÔºåÂàõÂª∫‰∏Ä‰∏™
            receiver = {
                metadata: metadata,
                chunks: new Array(metadata.totalChunks),
                receivedChunks: 0,
                progressElement: null,
                startTime: Date.now(),
                lastUpdateTime: Date.now(),
                lastReceivedBytes: 0
            };
            this.fileReceivers.set(metadata.fileId, receiver);
        } else {
            // Êõ¥Êñ∞ÂÖÉÊï∞ÊçÆ
            receiver.metadata = metadata;
            if (!receiver.isStreaming) {
                receiver.chunks = new Array(metadata.totalChunks);
            }
        }
        
        // ÊòæÁ§∫Êñá‰ª∂Êé•Êî∂ËøõÂ∫¶
        this.showFileProgress(metadata.fileId, metadata.fileName, 0, metadata.fileSize, false, metadata.userInfo);
        console.log(`ÂºÄÂßãÊé•Êî∂Êñá‰ª∂: ${metadata.fileName} (${metadata.totalChunks} Âùó)`);
    }
    
    
    handleFileChunk(chunkData, peerId) {
        const receiver = this.fileReceivers.get(chunkData.fileId);
        if (!receiver) {
            console.error('Êî∂Âà∞Êú™Áü•Êñá‰ª∂ÁöÑÊï∞ÊçÆÂùó:', chunkData.fileId);
            return;
        }
        
        // Â¶ÇÊûúÊòØÊµÅÂºè‰∏ãËΩΩÊ®°Âºè
        if (receiver.isStreaming) {
            if (!receiver.chunks) {
                receiver.chunks = [];
            }
            
            // Â∞Ü base64 Êï∞ÊçÆËΩ¨Êç¢‰∏∫‰∫åËøõÂà∂
            const binaryData = atob(chunkData.data.split(',')[1] || chunkData.data);
            const uint8Array = new Uint8Array(binaryData.length);
            for (let i = 0; i < binaryData.length; i++) {
                uint8Array[i] = binaryData.charCodeAt(i);
            }
            receiver.chunks.push(uint8Array);
        } else {
            // ÈùûÊµÅÂºèÊ®°ÂºèÔºåÊåâÂéüÊù•ÁöÑÊñπÂºèÂ§ÑÁêÜ
            receiver.chunks[chunkData.chunkIndex] = chunkData.data;
        }
        
        receiver.receivedChunks++;
        
        // ËÆ°ÁÆóËøõÂ∫¶ÂíåÈÄüÂ∫¶
        const progress = (receiver.receivedChunks / receiver.metadata.totalChunks) * 100;
        const currentTime = Date.now();
        const receivedBytes = (receiver.receivedChunks * receiver.metadata.chunkSize) || (receiver.receivedChunks * 64 * 1024);
        
        // ËÆ°ÁÆóÈÄüÂ∫¶ÔºàÊØèÁßíÊõ¥Êñ∞‰∏ÄÊ¨°Ôºâ
        if (currentTime - receiver.lastUpdateTime >= 1000) {
            const timeDiff = (currentTime - receiver.lastUpdateTime) / 1000;
            const bytesDiff = receivedBytes - receiver.lastReceivedBytes;
            const speed = bytesDiff / timeDiff;
            
            receiver.lastUpdateTime = currentTime;
            receiver.lastReceivedBytes = receivedBytes;
            
            this.updateFileProgress(chunkData.fileId, progress, speed);
        } else {
            this.updateFileProgress(chunkData.fileId, progress);
        }
        
        // Ê£ÄÊü•ÊòØÂê¶Êé•Êî∂ÂÆåÊàê
        if (receiver.receivedChunks === receiver.metadata.totalChunks) {
            // ÁßªÈô§ËøõÂ∫¶Êù°
            this.removeFileProgress(chunkData.fileId);
            
            // Êé•Êî∂ÂÆåÊàêÊèêÁ§∫
            const totalTime = (Date.now() - receiver.startTime) / 1000;
            const avgSpeed = receiver.metadata.fileSize / totalTime;
            this.showNotification(`‚úÖ Êñá‰ª∂Êé•Êî∂ÂÆåÊàê (Âπ≥ÂùáÈÄüÂ∫¶: ${this.formatSpeed(avgSpeed)})`);
            
            if (receiver.isStreaming) {
                // ÊµÅÂºè‰∏ãËΩΩÊ®°ÂºèÔºåÂàõÂª∫ÂÆåÊï¥Êñá‰ª∂Âπ∂Ëß¶Âèë‰∏ãËΩΩ
                const fullBlob = new Blob(receiver.chunks, { type: receiver.metadata.fileType || 'application/octet-stream' });
                const finalUrl = URL.createObjectURL(fullBlob);
                
                // ‰ΩøÁî®Êñ∞ÁöÑ‰∏ãËΩΩÈìæÊé•
                const downloadLink = document.createElement('a');
                downloadLink.href = finalUrl;
                downloadLink.download = receiver.metadata.fileName;
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                
                // Ê∏ÖÁêÜ
                setTimeout(() => {
                    URL.revokeObjectURL(finalUrl);
                    document.body.removeChild(downloadLink);
                }, 1000);
            } else {
                // ÂéüÊúâÁöÑÂ§ÑÁêÜÊñπÂºè
                const completeData = receiver.chunks.join('');
                const blob = this.dataURLtoBlob(completeData);
                const url = URL.createObjectURL(blob);
                
                const downloadLink = document.createElement('a');
                downloadLink.href = url;
                downloadLink.download = receiver.metadata.fileName;
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                
                setTimeout(() => {
                    URL.revokeObjectURL(url);
                }, 1000);
            }
            
            // Âú®ËÅäÂ§©ËÆ∞ÂΩï‰∏≠ÊòæÁ§∫Â∑≤Êé•Êî∂ÁöÑÊñá‰ª∂‰ø°ÊÅØ
            this.displayFileRecord({
                ...receiver.metadata,
                isReceived: true
            }, false);
            
            // Ê∏ÖÁêÜÊé•Êî∂Âô®
            this.fileReceivers.delete(chunkData.fileId);
        }
    }
    
    displayImage(imageData, isOwn) {
        const messageWrapper = document.createElement('div');
        messageWrapper.className = `message-wrapper ${isOwn ? 'own' : 'other'}`;
        
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        
        const avatar = document.createElement('img');
        avatar.className = 'message-avatar';
        avatar.src = imageData.userInfo.avatar;
        avatar.alt = imageData.userInfo.name;
        
        const headerText = document.createElement('div');
        headerText.className = 'message-header-text';
        
        const name = document.createElement('span');
        name.className = 'message-name';
        name.textContent = imageData.userInfo.name;
        
        const time = document.createElement('span');
        time.className = 'message-time';
        time.textContent = new Date(imageData.timestamp).toLocaleTimeString();
        
        headerText.appendChild(name);
        headerText.appendChild(time);
        
        messageHeader.appendChild(avatar);
        messageHeader.appendChild(headerText);
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOwn ? 'message-own' : 'message-other'}`;
        
        const img = document.createElement('img');
        img.src = imageData.data;
        img.alt = imageData.fileName;
        img.style.maxWidth = '300px';
        img.style.maxHeight = '300px';
        img.style.borderRadius = '8px';
        img.style.cursor = 'pointer';
        
        // ÁÇπÂáªÂõæÁâáÊü•ÁúãÂ§ßÂõæ
        img.onclick = () => {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
                cursor: pointer;
            `;
            
            const fullImg = document.createElement('img');
            fullImg.src = imageData.data;
            fullImg.style.maxWidth = '90%';
            fullImg.style.maxHeight = '90%';
            fullImg.style.objectFit = 'contain';
            
            modal.appendChild(fullImg);
            modal.onclick = () => modal.remove();
            document.body.appendChild(modal);
        };
        
        messageDiv.appendChild(img);
        
        messageWrapper.appendChild(messageHeader);
        messageWrapper.appendChild(messageDiv);
        
        this.domElements.chatMessages.appendChild(messageWrapper);
        this.domElements.chatMessages.scrollTop = this.domElements.chatMessages.scrollHeight;
    }
    
    displayFile(fileData, isOwn) {
        const messageWrapper = document.createElement('div');
        messageWrapper.className = `message-wrapper ${isOwn ? 'own' : 'other'}`;
        
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        
        const avatar = document.createElement('img');
        avatar.className = 'message-avatar';
        avatar.src = fileData.userInfo.avatar;
        avatar.alt = fileData.userInfo.name;
        
        const headerText = document.createElement('div');
        headerText.className = 'message-header-text';
        
        const name = document.createElement('span');
        name.className = 'message-name';
        name.textContent = fileData.userInfo.name;
        
        const time = document.createElement('span');
        time.className = 'message-time';
        time.textContent = new Date(fileData.timestamp).toLocaleTimeString();
        
        headerText.appendChild(name);
        headerText.appendChild(time);
        
        messageHeader.appendChild(avatar);
        messageHeader.appendChild(headerText);
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOwn ? 'message-own' : 'message-other'}`;
        
        const fileContainer = document.createElement('div');
        fileContainer.className = 'file-container';
        fileContainer.style.cssText = `
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 250px;
        `;
        
        // Êñá‰ª∂ÂõæÊ†á
        const fileIcon = document.createElement('div');
        fileIcon.style.cssText = `
            font-size: 48px;
            flex-shrink: 0;
        `;
        fileIcon.textContent = this.getFileIcon(fileData.fileType);
        
        // Êñá‰ª∂‰ø°ÊÅØ
        const fileInfo = document.createElement('div');
        fileInfo.style.cssText = `
            flex: 1;
            overflow: hidden;
        `;
        
        const fileName = document.createElement('div');
        fileName.style.cssText = `
            font-weight: 600;
            color: ${isOwn ? 'rgba(255, 255, 255, 0.95)' : '#374151'};
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        `;
        fileName.textContent = fileData.fileName;
        
        const fileSize = document.createElement('div');
        fileSize.style.cssText = `
            font-size: 12px;
            color: ${isOwn ? 'rgba(255, 255, 255, 0.75)' : '#6b7280'};
            margin-top: 4px;
        `;
        fileSize.textContent = this.formatFileSize(fileData.fileSize);
        
        fileInfo.appendChild(fileName);
        fileInfo.appendChild(fileSize);
        
        // ‰∏ãËΩΩÊåâÈíÆ
        const downloadBtn = document.createElement('a');
        downloadBtn.href = fileData.blob ? fileData.data : fileData.data; // Â¶ÇÊûúÊúâblob‰ΩøÁî®blob URL
        downloadBtn.download = fileData.fileName;
        downloadBtn.style.cssText = `
            padding: 8px 16px;
            background: ${isOwn ? 'rgba(255, 255, 255, 0.2)' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'};
            color: white;
            border-radius: 20px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: ${isOwn ? '1px solid rgba(255, 255, 255, 0.3)' : 'none'};
        `;
        downloadBtn.textContent = '‰∏ãËΩΩ';
        downloadBtn.onmouseover = () => {
            downloadBtn.style.transform = 'translateY(-2px)';
            downloadBtn.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.4)';
            if (isOwn) {
                downloadBtn.style.background = 'rgba(255, 255, 255, 0.3)';
            }
        };
        downloadBtn.onmouseout = () => {
            downloadBtn.style.transform = 'translateY(0)';
            downloadBtn.style.boxShadow = 'none';
            if (isOwn) {
                downloadBtn.style.background = 'rgba(255, 255, 255, 0.2)';
            }
        };
        
        fileContainer.appendChild(fileIcon);
        fileContainer.appendChild(fileInfo);
        fileContainer.appendChild(downloadBtn);
        
        messageDiv.appendChild(fileContainer);
        
        messageWrapper.appendChild(messageHeader);
        messageWrapper.appendChild(messageDiv);
        
        this.domElements.chatMessages.appendChild(messageWrapper);
        this.domElements.chatMessages.scrollTop = this.domElements.chatMessages.scrollHeight;
    }
    
    getFileIcon(fileNameOrType) {
        // ÊîØÊåÅÈÄöËøáÊñá‰ª∂ÂêçÊàñMIMEÁ±ªÂûãËé∑ÂèñÂõæÊ†á
        let fileType = fileNameOrType;
        
        // Â¶ÇÊûúÊòØÊñá‰ª∂ÂêçÔºåÊèêÂèñÊâ©Â±ïÂêç
        if (fileNameOrType && fileNameOrType.includes('.')) {
            const ext = fileNameOrType.split('.').pop().toLowerCase();
            // Ê†πÊçÆÊâ©Â±ïÂêçÂà§Êñ≠Á±ªÂûã
            if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp'].includes(ext)) return 'üñºÔ∏è';
            if (['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(ext)) return 'üé•';
            if (['mp3', 'wav', 'flac', 'aac', 'ogg', 'm4a'].includes(ext)) return 'üéµ';
            if (ext === 'pdf') return 'üìë';
            if (['zip', 'rar', '7z', 'tar', 'gz'].includes(ext)) return 'üì¶';
            if (['doc', 'docx'].includes(ext)) return 'üìù';
            if (['xls', 'xlsx'].includes(ext)) return 'üìä';
            if (['ppt', 'pptx'].includes(ext)) return 'üìà';
            if (['txt', 'text'].includes(ext)) return 'üìÉ';
            if (['js', 'json', 'ts', 'jsx', 'tsx', 'py', 'java', 'cpp', 'c', 'h'].includes(ext)) return 'üíª';
        }
        
        // Â¶ÇÊûúÊòØMIMEÁ±ªÂûã
        if (!fileType) return 'üìÑ';
        if (fileType.startsWith('image/')) return 'üñºÔ∏è';
        if (fileType.startsWith('video/')) return 'üé•';
        if (fileType.startsWith('audio/')) return 'üéµ';
        if (fileType.includes('pdf')) return 'üìë';
        if (fileType.includes('zip') || fileType.includes('rar') || fileType.includes('7z')) return 'üì¶';
        if (fileType.includes('doc') || fileType.includes('docx')) return 'üìù';
        if (fileType.includes('xls') || fileType.includes('xlsx')) return 'üìä';
        if (fileType.includes('ppt') || fileType.includes('pptx')) return 'üìà';
        if (fileType.includes('text') || fileType.includes('txt')) return 'üìÉ';
        if (fileType.includes('javascript') || fileType.includes('json')) return 'üíª';
        
        return 'üìÑ';
    }
    
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    formatSpeed(bytesPerSecond) {
        if (bytesPerSecond === 0) return '0 B/s';
        
        const k = 1024;
        const sizes = ['B/s', 'KB/s', 'MB/s', 'GB/s'];
        const i = Math.floor(Math.log(bytesPerSecond) / Math.log(k));
        
        return parseFloat((bytesPerSecond / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // ÊòæÁ§∫Êñá‰ª∂ËÆ∞ÂΩïÔºà‰ªÖÊòæÁ§∫Êñá‰ª∂‰ø°ÊÅØÔºå‰∏çÂåÖÂê´ÂÆûÈôÖÂÜÖÂÆπÔºâ
    displayFileRecord(fileData, isOwn) {
        const messageWrapper = document.createElement('div');
        messageWrapper.className = `message-wrapper ${isOwn ? 'own' : 'other'}`;
        
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        
        const avatar = document.createElement('img');
        avatar.className = 'message-avatar';
        avatar.src = fileData.userInfo.avatar;
        avatar.alt = fileData.userInfo.name;
        
        const headerText = document.createElement('div');
        headerText.className = 'message-header-text';
        
        const name = document.createElement('span');
        name.className = 'message-name';
        name.textContent = fileData.userInfo.name;
        
        const time = document.createElement('span');
        time.className = 'message-time';
        time.textContent = new Date(fileData.timestamp || Date.now()).toLocaleTimeString();
        
        headerText.appendChild(name);
        headerText.appendChild(time);
        
        messageHeader.appendChild(avatar);
        messageHeader.appendChild(headerText);
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOwn ? 'message-own' : 'message-other'}`;
        
        const fileRecord = document.createElement('div');
        fileRecord.className = 'file-record';
        fileRecord.innerHTML = `
            <div class="file-record-icon">${this.getFileIcon(fileData.fileName)}</div>
            <div class="file-record-info">
                <div class="file-record-name">${fileData.fileName}</div>
                <div class="file-record-details">
                    <span class="file-size">${this.formatFileSize(fileData.fileSize)}</span>
                    <span class="file-status">${isOwn ? 'Â∑≤ÂèëÈÄÅ' : 'Â∑≤Êé•Êî∂'}</span>
                </div>
            </div>
        `;
        
        messageDiv.appendChild(fileRecord);
        messageWrapper.appendChild(messageHeader);
        messageWrapper.appendChild(messageDiv);
        
        this.domElements.chatMessages.appendChild(messageWrapper);
        this.domElements.chatMessages.scrollTop = this.domElements.chatMessages.scrollHeight;
    }
    
    dataURLtoBlob(dataURL) {
        const arr = dataURL.split(',');
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        
        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }
        
        return new Blob([u8arr], { type: mime });
    }
    
    dataURLtoArrayBuffer(dataURL) {
        const arr = dataURL.split(',');
        const bstr = atob(arr[1]);
        const buffer = new ArrayBuffer(bstr.length);
        const u8arr = new Uint8Array(buffer);
        
        for (let i = 0; i < bstr.length; i++) {
            u8arr[i] = bstr.charCodeAt(i);
        }
        
        return buffer;
    }
    
    // Êñá‰ª∂‰º†ËæìËØ∑Ê±ÇÂ§ÑÁêÜ
    handleFileOffer(offer, peerId) {
        // ÊòæÁ§∫Êñá‰ª∂Êé•Êî∂ËØ∑Ê±Ç
        this.displayFileOffer(offer, false, peerId);
    }
    
    displayFileOffer(offer, isOwn, peerId = null) {
        const messageWrapper = document.createElement('div');
        messageWrapper.className = `message-wrapper ${isOwn ? 'own' : 'other'}`;
        messageWrapper.id = `file-offer-${offer.fileId}`;
        
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        
        const avatar = document.createElement('img');
        avatar.className = 'message-avatar';
        avatar.src = offer.userInfo.avatar;
        avatar.alt = offer.userInfo.name;
        
        const headerText = document.createElement('div');
        headerText.className = 'message-header-text';
        
        const name = document.createElement('span');
        name.className = 'message-name';
        name.textContent = offer.userInfo.name;
        
        const time = document.createElement('span');
        time.className = 'message-time';
        time.textContent = new Date(offer.timestamp).toLocaleTimeString();
        
        headerText.appendChild(name);
        headerText.appendChild(time);
        
        messageHeader.appendChild(avatar);
        messageHeader.appendChild(headerText);
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOwn ? 'message-own' : 'message-other'}`;
        
        const fileOfferContainer = document.createElement('div');
        fileOfferContainer.className = 'file-offer-container';
        fileOfferContainer.style.cssText = `
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 250px;
        `;
        
        // Êñá‰ª∂ÂõæÊ†á
        const fileIcon = document.createElement('div');
        fileIcon.style.cssText = `
            font-size: 48px;
            flex-shrink: 0;
        `;
        fileIcon.textContent = this.getFileIcon(offer.fileType);
        
        // Êñá‰ª∂‰ø°ÊÅØ
        const fileInfo = document.createElement('div');
        fileInfo.style.cssText = `
            flex: 1;
            overflow: hidden;
        `;
        
        const fileName = document.createElement('div');
        fileName.style.cssText = `
            font-weight: 600;
            color: ${isOwn ? 'rgba(255, 255, 255, 0.95)' : '#374151'};
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        `;
        fileName.textContent = offer.fileName;
        
        const fileSize = document.createElement('div');
        fileSize.style.cssText = `
            font-size: 12px;
            color: ${isOwn ? 'rgba(255, 255, 255, 0.75)' : '#6b7280'};
            margin-top: 4px;
        `;
        fileSize.textContent = this.formatFileSize(offer.fileSize);
        
        fileInfo.appendChild(fileName);
        fileInfo.appendChild(fileSize);
        
        fileOfferContainer.appendChild(fileIcon);
        fileOfferContainer.appendChild(fileInfo);
        
        if (isOwn) {
            // ÂèëÈÄÅÊñπÊòæÁ§∫Á≠âÂæÖÁä∂ÊÄÅ
            const statusDiv = document.createElement('div');
            statusDiv.className = 'file-status';
            statusDiv.style.cssText = `
                font-size: 14px;
                color: rgba(255, 255, 255, 0.8);
            `;
            statusDiv.textContent = 'Á≠âÂæÖÂØπÊñπÊé•Êî∂...';
            fileOfferContainer.appendChild(statusDiv);
        } else {
            // Êé•Êî∂ÊñπÊòæÁ§∫Êé•Âèó/ÊãíÁªùÊåâÈíÆ
            const buttonsDiv = document.createElement('div');
            buttonsDiv.style.cssText = `
                display: flex;
                gap: 10px;
            `;
            
            const acceptBtn = document.createElement('button');
            acceptBtn.style.cssText = `
                padding: 8px 16px;
                background: #10b981;
                color: white;
                border: none;
                border-radius: 20px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
            `;
            acceptBtn.textContent = 'Êé•Êî∂';
            acceptBtn.onclick = () => this.acceptFileOffer(offer, peerId);
            
            const rejectBtn = document.createElement('button');
            rejectBtn.style.cssText = `
                padding: 8px 16px;
                background: #ef4444;
                color: white;
                border: none;
                border-radius: 20px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
            `;
            rejectBtn.textContent = 'ÊãíÁªù';
            rejectBtn.onclick = () => this.rejectFileOffer(offer, peerId);
            
            buttonsDiv.appendChild(acceptBtn);
            buttonsDiv.appendChild(rejectBtn);
            fileOfferContainer.appendChild(buttonsDiv);
        }
        
        messageDiv.appendChild(fileOfferContainer);
        
        messageWrapper.appendChild(messageHeader);
        messageWrapper.appendChild(messageDiv);
        
        this.domElements.chatMessages.appendChild(messageWrapper);
        this.domElements.chatMessages.scrollTop = this.domElements.chatMessages.scrollHeight;
    }
    
    acceptFileOffer(offer, peerId) {
        // Á´ãÂç≥ÂºÄÂßãÊµÅÂºè‰∏ãËΩΩ
        this.startStreamDownload(offer, peerId);
        
        // ÂèëÈÄÅÊé•ÂèóÂìçÂ∫î
        const response = {
            type: 'file-accept',
            fileId: offer.fileId,
            userId: this.currentUserId
        };
        
        const peerData = this.peerConnections.get(peerId);
        if (peerData && peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
            peerData.dataChannel.send(JSON.stringify(response));
        }
        
        // ÁßªÈô§offer UI
        const offerElement = document.getElementById(`file-offer-${offer.fileId}`);
        if (offerElement) {
            offerElement.remove();
        }
    }
    
    rejectFileOffer(offer, peerId) {
        // ÂèëÈÄÅÊãíÁªùÂìçÂ∫î
        const response = {
            type: 'file-reject',
            fileId: offer.fileId,
            userId: this.currentUserId
        };
        
        const peerData = this.peerConnections.get(peerId);
        if (peerData && peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
            peerData.dataChannel.send(JSON.stringify(response));
        }
        
        // ÁßªÈô§UIÂÖÉÁ¥†
        const offerElement = document.getElementById(`file-offer-${offer.fileId}`);
        if (offerElement) {
            offerElement.remove();
        }
        
        this.showNotification('‚ùå Â∑≤ÊãíÁªùÊé•Êî∂Êñá‰ª∂');
    }
    
    handleFileAccept(response, peerId) {
        const file = this.pendingFiles?.get(response.fileId);
        if (!file) {
            console.error('Êâæ‰∏çÂà∞ÂæÖÂèëÈÄÅÁöÑÊñá‰ª∂:', response.fileId);
            return;
        }
        
        // Á´ãÂç≥ÁßªÈô§offer UIÔºåÊòæÁ§∫ËøõÂ∫¶Êù°
        const offerElement = document.getElementById(`file-offer-${response.fileId}`);
        if (offerElement) {
            offerElement.remove();
        }
        
        // ÂºÄÂßãÊµÅÂºèÂèëÈÄÅÊñá‰ª∂
        this.startFileSending(file, response.fileId, peerId);
    }
    
    handleFileReject(response, peerId) {
        // ÁßªÈô§ÂæÖÂèëÈÄÅÊñá‰ª∂
        this.pendingFiles?.delete(response.fileId);
        
        // Êõ¥Êñ∞UI
        const offerElement = document.getElementById(`file-offer-${response.fileId}`);
        if (offerElement) {
            const statusDiv = offerElement.querySelector('.file-status');
            if (statusDiv) {
                statusDiv.textContent = 'ÂØπÊñπÊãíÁªùÊé•Êî∂';
                statusDiv.style.color = '#ef4444';
            }
        }
        
        this.showNotification('‚ùå ÂØπÊñπÊãíÁªùÊé•Êî∂Êñá‰ª∂');
    }
    
    handleFileCancel(message, peerId) {
        // Â§ÑÁêÜÂèëÈÄÅÊñπÂèñÊ∂àÊñá‰ª∂‰º†Ëæì
        const receiver = this.fileReceivers?.get(message.fileId);
        if (receiver) {
            // Ê∏ÖÁêÜÊé•Êî∂Âô®
            this.fileReceivers.delete(message.fileId);
            
            // ÁßªÈô§ËøõÂ∫¶Êù°
            this.removeFileProgress(message.fileId);
            
            // ÊòæÁ§∫ÂèñÊ∂àÈÄöÁü•
            const fileName = receiver.metadata?.fileName || 'Êñá‰ª∂';
            this.showNotification(`‚ö†Ô∏è ÂèëÈÄÅÊñπÂèñÊ∂à‰∫ÜÊñá‰ª∂‰º†Ëæì: ${fileName}`);
        }
    }
    
    handleFileCancelReceive(message, peerId) {
        // Â§ÑÁêÜÊé•Êî∂ÊñπÂèñÊ∂àÊñá‰ª∂‰º†Ëæì
        const sender = this.fileSenders?.get(message.fileId);
        if (sender) {
            // ÂÅúÊ≠¢ÂèëÈÄÅ
            sender.isPaused = true;
            
            // ‰ªéÂèëÈÄÅÈòüÂàó‰∏≠ÁßªÈô§
            this.fileSenders.delete(message.fileId);
            
            // ÁßªÈô§ËøõÂ∫¶Êù°UI
            this.removeFileProgress(message.fileId);
            
            this.showNotification(`‚ö†Ô∏è Êé•Êî∂ÊñπÂèñÊ∂à‰∫ÜÊñá‰ª∂‰º†Ëæì: ${sender.file.name}`);
        }
    }
    
    // ÂºÄÂßãÂÆûÊó∂ÂèëÈÄÅÊñá‰ª∂ÔºàÊµÅÂºè‰º†ËæìÔºâ
    startFileSending(file, fileId, peerId) {
        const chunkSize = 64 * 1024; // 64KB chunks
        const totalChunks = Math.ceil(file.size / chunkSize);
        
        // Á´ãÂç≥ÊòæÁ§∫ÂèëÈÄÅËøõÂ∫¶UI
        this.showFileSendProgress(fileId, file.name, 0, file.size);
        
        // ÂèëÈÄÅÊñá‰ª∂ÂÖÉÊï∞ÊçÆ
        const metadata = {
            type: 'file-metadata',
            fileId: fileId,
            fileName: file.name,
            fileType: file.type,
            fileSize: file.size,
            totalChunks: totalChunks,
            chunkSize: chunkSize,
            userId: this.currentUserId,
            userInfo: this.currentUserInfo,
            timestamp: Date.now()
        };
        
        const peerData = this.peerConnections.get(peerId);
        if (peerData && peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
            peerData.dataChannel.send(JSON.stringify(metadata));
        }
        
        // ÂàõÂª∫ÂèëÈÄÅËøõÂ∫¶Ë∑üË∏™
        this.fileSenders = this.fileSenders || new Map();
        const sender = {
            file: file,
            fileId: fileId,
            totalChunks: totalChunks,
            currentChunk: 0,
            chunkSize: chunkSize,
            peerId: peerId,
            isPaused: false,
            sendNextChunk: null,
            startTime: Date.now(),
            lastUpdateTime: Date.now(),
            lastSentBytes: 0
        };
        
        // ÂÆö‰πâÂèëÈÄÅ‰∏ã‰∏Ä‰∏™ÂùóÁöÑÂáΩÊï∞
        sender.sendNextChunk = () => {
            if (sender.isPaused || sender.currentChunk >= totalChunks) {
                return;
            }
            
            const start = sender.currentChunk * chunkSize;
            const end = Math.min(start + chunkSize, file.size);
            const chunk = file.slice(start, end);
            
            const reader = new FileReader();
            reader.onload = (e) => {
                const chunkData = {
                    type: 'file-chunk',
                    fileId: fileId,
                    chunkIndex: sender.currentChunk,
                    totalChunks: totalChunks,
                    data: e.target.result
                };
                
                const peerData = this.peerConnections.get(peerId);
                if (peerData && peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
                    try {
                        // Ê£ÄÊü•Êï∞ÊçÆÂ§ßÂ∞èÔºåÁ°Æ‰øù‰∏çË∂ÖËøáWebRTCÈôêÂà∂
                        const chunkStr = JSON.stringify(chunkData);
                        if (chunkStr.length > 256 * 1024) { // 256KB limit for maximum stability
                            console.warn('Chunk too large, skipping:', chunkStr.length);
                            sender.currentChunk++;
                            setTimeout(() => sender.sendNextChunk(), 50);
                            return;
                        }
                        
                        // Ê£ÄÊü•ÁºìÂÜ≤Âå∫Áä∂ÊÄÅÔºåÂ¶ÇÊûúÁºìÂÜ≤Âå∫Êª°‰∫ÜÂ∞±Á≠âÂæÖ
                        const bufferedAmount = peerData.dataChannel.bufferedAmount;
                        const maxBuffer = 256 * 1024; // 256KB buffer limit
                        
                        if (bufferedAmount > maxBuffer) {
                            // ÁºìÂÜ≤Âå∫Êª°‰∫ÜÔºåÁ≠âÂæÖÂêéÈáçËØï
                            console.log('Buffer full, waiting...', bufferedAmount);
                            setTimeout(() => sender.sendNextChunk(), 100);
                            return;
                        }
                        
                        peerData.dataChannel.send(chunkStr);
                        
                        sender.currentChunk++;
                        
                        // Êõ¥Êñ∞ËøõÂ∫¶ÂíåÈÄüÂ∫¶
                        const progress = (sender.currentChunk / totalChunks) * 100;
                        const currentTime = Date.now();
                        const sentBytes = sender.currentChunk * chunkSize;
                        
                        // ËÆ°ÁÆóÈÄüÂ∫¶ÔºàÊØèÁßíÊõ¥Êñ∞‰∏ÄÊ¨°Ôºâ
                        if (currentTime - sender.lastUpdateTime >= 1000) {
                            const timeDiff = (currentTime - sender.lastUpdateTime) / 1000;
                            const bytesDiff = sentBytes - sender.lastSentBytes;
                            const speed = bytesDiff / timeDiff;
                            
                            sender.lastUpdateTime = currentTime;
                            sender.lastSentBytes = sentBytes;
                            
                            this.updateSendingProgress(fileId, progress, speed);
                        } else {
                            this.updateSendingProgress(fileId, progress);
                        }
                        
                        // ÂèëÈÄÅ‰∏ã‰∏Ä‰∏™ÂùóÔºåÊ†πÊçÆÁºìÂÜ≤Âå∫Áä∂ÊÄÅË∞ÉÊï¥Âª∂Ëøü
                        if (sender.currentChunk < totalChunks) {
                            const delay = bufferedAmount > 64 * 1024 ? 50 : 20; // Âä®ÊÄÅË∞ÉÊï¥Âª∂Ëøü
                            setTimeout(() => sender.sendNextChunk(), delay);
                        } else {
                            // ÂèëÈÄÅÂÆåÊàê
                            this.fileSendingComplete(fileId);
                            this.fileSenders.delete(fileId);
                            this.pendingFiles?.delete(fileId);
                        }
                    } catch (error) {
                        console.error('Error sending chunk:', error);
                        sender.isPaused = true;
                        this.showNotification(`‚ùå Êñá‰ª∂ÂèëÈÄÅÂ§±Ë¥•: ${sender.file.name}`);
                        this.fileSenders.delete(fileId);
                    }
                } else {
                    console.warn('Data channel not ready, stopping file transfer');
                    sender.isPaused = true;
                    this.showNotification(`‚ùå ËøûÊé•Â∑≤Êñ≠ÂºÄÔºåÊñá‰ª∂ÂèëÈÄÅÂÅúÊ≠¢`);
                    this.fileSenders.delete(fileId);
                }
            };
            
            reader.readAsDataURL(chunk);
        };
        
        this.fileSenders.set(fileId, sender);
        
        // ÂºÄÂßãÂèëÈÄÅ
        sender.sendNextChunk();
    }
    
    updateSendingProgress(fileId, progress, speed = null) {
        // ÂÖàÁßªÈô§ÊóßÁöÑofferÂÖÉÁ¥†ÔºåÊòæÁ§∫Êñ∞ÁöÑËøõÂ∫¶Êù°UI
        const offerElement = document.getElementById(`file-offer-${fileId}`);
        if (offerElement && !document.getElementById(`progress-${fileId}`)) {
            // Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ
            const sender = this.fileSenders.get(fileId);
            if (sender) {
                offerElement.remove();
                // ‰ΩøÁî®Êñ∞ÁöÑËøõÂ∫¶Êù°UIÊòæÁ§∫ÂèëÈÄÅËøõÂ∫¶
                this.showFileSendProgress(fileId, sender.file.name, progress, sender.file.size);
            }
        }
        
        // Êõ¥Êñ∞ËøõÂ∫¶
        const progressWrapper = document.getElementById(`progress-${fileId}`);
        if (progressWrapper) {
            const progressFill = progressWrapper.querySelector('.file-progress-fill');
            const progressPercent = progressWrapper.querySelector('.progress-percent');
            
            if (progressFill) {
                progressFill.style.width = `${progress}%`;
            }
            if (progressPercent) {
                progressPercent.textContent = `${Math.round(progress)}%`;
            }
            
            // Êõ¥Êñ∞ÈÄüÂ∫¶ÊòæÁ§∫
            if (speed !== null) {
                const speedElement = progressWrapper.querySelector('.transfer-speed');
                if (speedElement) {
                    speedElement.textContent = `ÈÄüÂ∫¶: ${this.formatSpeed(speed)}`;
                }
            }
        }
    }
    
    fileSendingComplete(fileId) {
        const sender = this.fileSenders.get(fileId);
        
        // ÁßªÈô§ËøõÂ∫¶Êù°
        this.removeFileProgress(fileId);
        
        // ÁßªÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑofferÂÖÉÁ¥†
        const offerElement = document.getElementById(`file-offer-${fileId}`);
        if (offerElement) {
            offerElement.remove();
        }
        
        if (sender) {
            const totalTime = (Date.now() - sender.startTime) / 1000;
            const avgSpeed = sender.file.size / totalTime;
            this.showNotification(`‚úÖ Êñá‰ª∂ÂèëÈÄÅÂÆåÊàê (Âπ≥ÂùáÈÄüÂ∫¶: ${this.formatSpeed(avgSpeed)})`);
            
            // ÊòæÁ§∫Êñá‰ª∂ÂèëÈÄÅËÆ∞ÂΩï
            this.displayFileRecord({
                fileId: fileId,
                fileName: sender.file.name,
                fileType: sender.file.type,
                fileSize: sender.file.size,
                userId: this.currentUserId,
                userInfo: this.currentUserInfo,
                timestamp: Date.now()
            }, true);
            
            // Ê∏ÖÁêÜÂèëÈÄÅÂô®
            this.fileSenders.delete(fileId);
            this.pendingFiles?.delete(fileId);
        } else {
            this.showNotification('‚úÖ Êñá‰ª∂ÂèëÈÄÅÂÆåÊàê');
        }
    }
    
    prepareFileReceiver(offer) {
        // ‰∏∫Êé•Êî∂Êñá‰ª∂ÂÅöÂáÜÂ§á
        this.fileReceivers = this.fileReceivers || new Map();
        this.fileReceivers.set(offer.fileId, {
            offer: offer,
            metadata: null,
            chunks: null,
            receivedChunks: 0,
            lastChunkTime: Date.now()
        });
    }
    
    // ÂºÄÂßãÊµÅÂºè‰∏ãËΩΩ
    startStreamDownload(offer, peerId) {
        // ÂáÜÂ§áÊé•Êî∂Âô®
        this.fileReceivers = this.fileReceivers || new Map();
        
        // ÂàùÂßãÂåñÊé•Êî∂Âô®ÔºàÊµÅÂºèÊ®°ÂºèÔºâ
        const receiver = {
            offer: offer,
            metadata: null,
            chunks: [],
            receivedChunks: 0,
            startTime: Date.now(),
            lastUpdateTime: Date.now(),
            lastReceivedBytes: 0,
            isStreaming: true
        };
        
        this.fileReceivers.set(offer.fileId, receiver);
    }
    
    handleFileProgress(progress, peerId) {
        // Â§ÑÁêÜÊñá‰ª∂‰º†ËæìËøõÂ∫¶Êõ¥Êñ∞ÔºàÁî®‰∫éÊñ≠ÁÇπÁª≠‰º†Ôºâ
        console.log(`Êñá‰ª∂ËøõÂ∫¶Êõ¥Êñ∞: ${progress.fileId} - ${progress.receivedChunks}/${progress.totalChunks}`);
    }

    // Â∑•ÂÖ∑ÊñπÊ≥ï
    generateUserInfo() {
        const names = [
            'Â≠ôÊÇüÁ©∫', 'ÂîêÂÉß', 'Áå™ÂÖ´Êàí', 'Ê≤ôÂÉß', 'ÁôΩÈæôÈ©¨', 'ËßÇÈü≥Ëè©Ëê®', 'Â¶ÇÊù•‰ΩõÁ•ñ', 'ÁéâÁöáÂ§ßÂ∏ù', 'Â§™ÁôΩÈáëÊòü', 'Âì™Âêí',
            'Ë¥æÂÆùÁéâ', 'ÊûóÈªõÁéâ', 'ËñõÂÆùÈíó', 'ÁéãÁÜôÂá§', 'Ë¥æÊØç', 'ÂàòÂß•Âß•', 'Âè≤Êπò‰∫ë', 'Â¶ôÁéâ', 'Êô¥ÈõØ', 'Ë¢≠‰∫∫',
            'ÂàòÂ§á', 'ÂÖ≥ÁæΩ', 'Âº†È£û', 'ËØ∏Ëëõ‰∫Æ', 'ÊõπÊìç', 'Ëµµ‰∫ë', 'ÂêïÂ∏É', 'Ë≤ÇËùâ', 'Âë®Áëú', 'Â∞è‰πî',
            'ÂÆãÊ±ü', 'ÊûóÂÜ≤', 'Ê≠¶Êùæ', 'È≤ÅÊô∫Ê∑±', 'ÊùéÈÄµ', 'ÁáïÈùí', 'ÊΩòÈáëËé≤', 'Â≠ô‰∫åÂ®ò', 'Êâà‰∏âÂ®ò', 'Êó∂ËøÅ'
        ];
        
        const name = names[Math.floor(Math.random() * names.length)];
        const seed = Math.random().toString(36).substring(2, 15);
        const avatar = `https://api.dicebear.com/7.x/adventurer/svg?seed=${seed}`;
        
        return { name, avatar };
    }

    formatUserId(userId) {
        if (!userId) return 'user_unknown';
        const shortId = userId.substring(0, 8).toLowerCase();
        return `user_${shortId}`;
    }

    updateUserList(usersList) {
        if (usersList) {
            this.roomUsers.clear();
            for (const [userId, userInfo] of Object.entries(usersList)) {
                this.roomUsers.set(userId, userInfo);
            }
        }
        
        this.renderUserList();
        
        if (this.isWebSocketConnected) {
            this.updateConnectionStatus('connected');
        }
    }

    renderUserList() {
        let userListContainer = document.getElementById('userListContainer');
        if (!userListContainer) {
            userListContainer = document.createElement('div');
            userListContainer.id = 'userListContainer';
            userListContainer.className = 'user-list-container';
            
            const roomSection = document.querySelector('.room-section');
            roomSection.appendChild(userListContainer);
        }
        
        const allUsers = Array.from(this.roomUsers.entries());
        const myself = allUsers.find(([userId]) => userId === this.currentUserId);
        const otherUsers = allUsers.filter(([userId]) => userId !== this.currentUserId);
        
        const sortedUsers = myself ? [myself, ...otherUsers] : otherUsers;
        
        const userItems = sortedUsers.map(([userId, userInfo]) => {
            const isConnected = this.peerConnections.has(userId) && 
                               this.peerConnections.get(userId).dataChannel && 
                               this.peerConnections.get(userId).dataChannel.readyState === 'open';
            const isSelf = userId === this.currentUserId;
            
            let selfStatus = '';
            if (isSelf) {
                let hasAnyConnection = false;
                this.peerConnections.forEach((peerData) => {
                    if (peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
                        hasAnyConnection = true;
                    }
                });
                selfStatus = hasAnyConnection ? 'connected' : 'pending';
            }
            
            const statusDot = `<span class="status-dot ${isSelf ? selfStatus : (isConnected ? 'connected' : 'pending')}"></span>`;
            
            return `
                <div class="user-item ${isSelf ? 'user-self' : ''}">
                    ${statusDot}
                    <img class="user-avatar-small" src="${userInfo.avatar}" alt="${userInfo.name}">
                    <span class="user-name">${userInfo.name}${isSelf ? ' (Êàë)' : ''}</span>
                </div>
            `;
        }).join('');
        
        userListContainer.innerHTML = `<div class="user-list">${userItems}</div>`;
    }

    closePeerConnections() {
        this.peerConnections.forEach((peerData) => {
            peerData.pc.close();
        });
        this.peerConnections.clear();
        this.renderUserList();
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    // Áªü‰∏ÄÁöÑÊñá‰ª∂ËøõÂ∫¶ÊòæÁ§∫ÊñπÊ≥ïÔºàÈÄÇÁî®‰∫éÂèëÈÄÅÂíåÊé•Êî∂Ôºâ
    showFileProgress(fileId, fileName, progress = 0, fileSize = 0, isOwn = false, userInfo = null) {
        const progressWrapper = document.createElement('div');
        progressWrapper.className = `message-wrapper ${isOwn ? 'own' : 'other'}`;
        progressWrapper.id = `progress-${fileId}`;
        
        // Ê∑ªÂä†Ê∂àÊÅØÂ§¥ÈÉ®
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        
        const avatar = document.createElement('img');
        avatar.className = 'message-avatar';
        avatar.src = userInfo ? userInfo.avatar : this.currentUserInfo.avatar;
        avatar.alt = userInfo ? userInfo.name : this.currentUserInfo.name;
        
        const headerText = document.createElement('div');
        headerText.className = 'message-header-text';
        
        const name = document.createElement('span');
        name.className = 'message-name';
        name.textContent = userInfo ? userInfo.name : this.currentUserInfo.name;
        
        const time = document.createElement('span');
        time.className = 'message-time';
        time.textContent = new Date().toLocaleTimeString();
        
        headerText.appendChild(name);
        headerText.appendChild(time);
        
        messageHeader.appendChild(avatar);
        messageHeader.appendChild(headerText);
        
        progressWrapper.appendChild(messageHeader);
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOwn ? 'message-own' : 'message-other'}`;
        
        // ÂàõÂª∫Áé∞‰ª£ÂåñÁöÑËøõÂ∫¶Âç°Áâá
        const progressCard = document.createElement('div');
        progressCard.className = 'file-progress-card';
        progressCard.innerHTML = `
            <div class="file-progress-header">
                <div class="file-progress-icon">${this.getFileIcon(fileName)}</div>
                <div class="file-progress-info">
                    <div class="file-progress-name">${fileName}</div>
                    <div class="file-progress-details">
                        <span class="file-size">${this.formatFileSize(fileSize)}</span>
                        <span class="transfer-speed"></span>
                    </div>
                </div>
                <button class="file-progress-cancel" data-file-id="${fileId}">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                    </svg>
                </button>
            </div>
            <div class="file-progress-status">
                <span class="progress-label">${isOwn ? 'ÂèëÈÄÅ‰∏≠' : 'Êé•Êî∂‰∏≠'}</span>
                <span class="progress-percent">${Math.round(progress)}%</span>
            </div>
            <div class="file-progress-bar">
                <div class="file-progress-fill" style="width: ${progress}%"></div>
            </div>
        `;
        
        messageDiv.appendChild(progressCard);
        progressWrapper.appendChild(messageDiv);
        
        this.domElements.chatMessages.appendChild(progressWrapper);
        this.domElements.chatMessages.scrollTop = this.domElements.chatMessages.scrollHeight;
        
        // Ê∑ªÂä†ÂèñÊ∂àÊåâÈíÆ‰∫ã‰ª∂
        const cancelBtn = progressCard.querySelector('.file-progress-cancel');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                if (isOwn) {
                    this.cancelFileSending(fileId);
                } else {
                    this.cancelFileReceiving(fileId);
                }
            });
        }
        
        // ‰øùÂ≠òËøõÂ∫¶ÂÖÉÁ¥†ÂºïÁî®
        if (!isOwn) {
            const receiver = this.fileReceivers.get(fileId);
            if (receiver) {
                receiver.progressElement = progressWrapper;
            }
        }
    }
    
    updateFileProgress(fileId, progress, speed = null) {
        const progressWrapper = document.getElementById(`progress-${fileId}`);
        if (progressWrapper) {
            const progressFill = progressWrapper.querySelector('.file-progress-fill');
            const progressPercent = progressWrapper.querySelector('.progress-percent');
            
            if (progressFill) {
                progressFill.style.width = `${progress}%`;
            }
            if (progressPercent) {
                progressPercent.textContent = `${Math.round(progress)}%`;
            }
            
            // Êõ¥Êñ∞ÈÄüÂ∫¶ÊòæÁ§∫
            if (speed !== null) {
                const speedElement = progressWrapper.querySelector('.transfer-speed');
                if (speedElement) {
                    speedElement.textContent = `‚Ä¢ ${this.formatSpeed(speed)}`;
                }
            }
        }
    }
    
    removeFileProgress(fileId) {
        const progressWrapper = document.getElementById(`progress-${fileId}`);
        if (progressWrapper) {
            progressWrapper.remove();
        }
    }
    
    // ÂèñÊ∂àÊñá‰ª∂Êé•Êî∂
    cancelFileReceiving(fileId) {
        const receiver = this.fileReceivers?.get(fileId);
        if (receiver) {
            // Ê∏ÖÁêÜÊé•Êî∂Âô®
            this.fileReceivers.delete(fileId);
            
            // ÁßªÈô§ËøõÂ∫¶Êù°UI
            this.removeFileProgress(fileId);
            
            // ÂèëÈÄÅÂèñÊ∂àÈÄöÁü•ÁªôÂèëÈÄÅÊñπ
            this.peerConnections.forEach((peerData) => {
                if (peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
                    peerData.dataChannel.send(JSON.stringify({
                        type: 'file-cancel-receive',
                        fileId: fileId,
                        userId: this.currentUserId
                    }));
                }
            });
            
            this.showNotification(`‚ùå Â∑≤ÂèñÊ∂àÊé•Êî∂: ${receiver.metadata?.fileName || 'Êñá‰ª∂'}`);
        }
    }
    
    // ÂèñÊ∂àÊñá‰ª∂ÂèëÈÄÅ
    cancelFileSending(fileId) {
        const sender = this.fileSenders?.get(fileId);
        if (sender) {
            // ÂÅúÊ≠¢ÂèëÈÄÅ
            sender.isPaused = true;
            
            // ‰ªéÂèëÈÄÅÈòüÂàó‰∏≠ÁßªÈô§
            this.fileSenders.delete(fileId);
            
            // ‰ªéÂæÖÂèëÈÄÅÊñá‰ª∂‰∏≠ÁßªÈô§
            this.pendingFiles?.delete(fileId);
            
            // ÁßªÈô§ËøõÂ∫¶Êù°UI
            this.removeFileProgress(fileId);
            
            // ÂèëÈÄÅÂèñÊ∂àÈÄöÁü•ÁªôÊé•Êî∂Êñπ
            this.peerConnections.forEach((peerData) => {
                if (peerData.dataChannel && peerData.dataChannel.readyState === 'open') {
                    peerData.dataChannel.send(JSON.stringify({
                        type: 'file-cancel',
                        fileId: fileId,
                        userId: this.currentUserId
                    }));
                }
            });
            
            this.showNotification(`‚ùå Â∑≤ÂèñÊ∂àÂèëÈÄÅ: ${sender.file.name}`);
        }
    }
    
    // ÊòæÁ§∫Êñá‰ª∂ÂèëÈÄÅËøõÂ∫¶Ôºà‰ΩøÁî®Áªü‰∏ÄÊñπÊ≥ïÔºâ
    showFileSendProgress(fileId, fileName, progress = 0, fileSize = 0) {
        this.showFileProgress(fileId, fileName, progress, fileSize, true, this.currentUserInfo);
    }

    showNotification(text) {
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = text;
        
        const existingNotifications = document.querySelectorAll('.notification:not(.notification-exit)');
        const offset = existingNotifications.length * 60;
        notification.style.top = `${20 + offset}px`;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('notification-show'), 10);
        
        setTimeout(() => {
            notification.classList.add('notification-exit');
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    cleanup() {
        this.closePeerConnections();
        this.roomUsers.clear();
        this.currentRoomId = null;
    }

    // ÊäΩË±°ÊñπÊ≥ïÔºåÂ≠êÁ±ªÈúÄË¶ÅÂÆûÁé∞
    handleJoinedRoom(data) {
        throw new Error('handleJoinedRoom must be implemented by subclass');
    }

    updateConnectionStatus(status) {
        throw new Error('updateConnectionStatus must be implemented by subclass');
    }
}

// ÂØºÂá∫Âü∫Á±ª
window.BaseChatMode = BaseChatMode;

// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã
window.modeSelector = new ModeSelector();